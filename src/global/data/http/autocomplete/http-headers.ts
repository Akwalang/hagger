import { HttpHeaders } from "../enums/http-headers.enum";

const names: string[] = Object.values(HttpHeaders);

const values: Record<string, string[]> = {
  [HttpHeaders.ContentType.toLowerCase()]: [
    "text/plain",
    "text/html",
    "text/css",
    "text/javascript",
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/svg+xml",
    "application/pdf",
    "application/octet-stream",
  ],
  [HttpHeaders.Accept.toLowerCase()]: [
    "*/*",
    "text/html",
    "application/json",
    "application/xml",
    "text/plain",
    "image/webp",
    "image/png",
    "image/*",
    "application/javascript",
    "text/css",
  ],
  [HttpHeaders.Authorization.toLowerCase()]: [
    "Bearer ",
    "Basic ",
    "Digest ",
    "OAuth ",
    "Token ",
  ],
  [HttpHeaders.UserAgent.toLowerCase()]: [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 17_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Linux; Android 14; SM-S901B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36",
  ],
  [HttpHeaders.CacheControl.toLowerCase()]: [
    "no-cache",
    "no-store",
    "max-age=0",
    "max-age=3600",
    "public",
    "private",
    "must-revalidate",
    "proxy-revalidate",
    "no-transform",
    "immutable",
    "stale-while-revalidate=86400",
    "stale-if-error=604800",
  ],
  [HttpHeaders.AcceptEncoding.toLowerCase()]: [
    "gzip",
    "deflate",
    "br",
    "compress",
    "identity",
    "*",
  ],
  [HttpHeaders.AcceptLanguage.toLowerCase()]: [
    "en-US",
    "en-GB",
    "en",
    "fr-FR",
    "fr-CA",
    "fr",
    "de-DE",
    "de",
    "es-ES",
    "es-MX",
    "es",
    "ru-RU",
    "ru",
    "zh-CN",
    "zh-TW",
    "zh",
    "ja-JP",
    "ja",
    "ko-KR",
    "ko",
    "*",
  ],
  [HttpHeaders.Connection.toLowerCase()]: [
    "keep-alive",
    "close",
    "upgrade"
  ],
  [HttpHeaders.Host.toLowerCase()]: [
    "{{calc.host}}",
  ],
  [HttpHeaders.XRequestedWith.toLowerCase()]: [
    "XMLHttpRequest",
  ],
  [HttpHeaders.Range.toLowerCase()]: [
    "bytes=0-499",
    "bytes=500-999",
    "bytes=1000-",
    "bytes=-500",
  ],
  [HttpHeaders.ContentLength.toLowerCase()]: [
    "{{calc.contentLength}}",
  ],
  [HttpHeaders.TransferEncoding.toLowerCase()]: [
    "chunked",
    "compress",
    "deflate",
    "gzip",
    "identity",
  ],
  [HttpHeaders.XAPIKey.toLowerCase()]: [
    "your_api_key_here",
    "abc123def456",
    "x-api-key-12345",
  ],
  [HttpHeaders.XForwardedProto.toLowerCase()]: [
    "http",
    "https",
  ],
  [HttpHeaders.XRequestID.toLowerCase()]: [
    "{{random.uuid}}",
  ],
};

const descriptions: Record<HttpHeaders, string> = {
  [HttpHeaders.ContentType]: "The media type of the resource",
  [HttpHeaders.Accept]: "The media types that are acceptable for the response",
  [HttpHeaders.Authorization]: "Credentials for authenticating a user agent with a server",
  [HttpHeaders.UserAgent]: "Information about the user agent originating the request",
  [HttpHeaders.CacheControl]: "Directives for caching mechanisms in both requests and responses",
  [HttpHeaders.AcceptEncoding]: "The content encoding that is acceptable in the response",
  [HttpHeaders.AcceptLanguage]: "The natural languages that are preferred in the response",
  [HttpHeaders.Connection]: "Control options for the current connection",
  [HttpHeaders.Host]: "The domain name of the server (for virtual hosting)",
  [HttpHeaders.Referer]: "The address of the previous web page from which a link to the currently requested page was followed",
  [HttpHeaders.Origin]: "The origin of the request (scheme, host, and port)",
  [HttpHeaders.XRequestedWith]: "An identifier for XMLHttpRequest (AJAX) requests",
  [HttpHeaders.IfModifiedSince]: "Allows a conditional GET to be made based on modification date",
  [HttpHeaders.Range]: "Requests only part of an entity (byte serving)",
  [HttpHeaders.Cookie]: "Contains stored HTTP cookies previously sent by the server with Set-Cookie header",
  [HttpHeaders.SetCookie]: "Used by the server to send cookies to the user agent",
  [HttpHeaders.ContentLength]: "The size of the request body in octets (8-bit bytes)",
  [HttpHeaders.TransferEncoding]: "The form of encoding used to safely transfer the payload body to the user agent",
  [HttpHeaders.ETag]: "A unique identifier for a specific version of a resource",
  [HttpHeaders.IfNoneMatch]: "Allows a conditional GET to be made based on ETag value",
  [HttpHeaders.XAPIKey]: "An identifier for API keys used for authentication and authorization",
  [HttpHeaders.XCSRFToken]: "A token used to prevent Cross-Site Request Forgery attacks",
  [HttpHeaders.XForwardedFor]: "Identifies the originating IP address of a client connecting through an HTTP proxy or load balancer",
  [HttpHeaders.XForwardedProto]: "Identifies the protocol (HTTP or HTTPS) used by the client to connect to the proxy or load balancer",
  [HttpHeaders.XRequestID]: "A unique identifier for the request, often used for tracing and logging",
};

export const HttpHeadersAutocomplete = { names, values, descriptions };
